name: Test Milestone VMS
on:
  workflow_dispatch:
  # Uncomment the schedule node to use cron notation to schedule the worlflow.
  # schedule:
  #   - cron: '0 * * * *' # Every hour
jobs:
  Test-Milestone:
    # Replace self-hosted with "windows-latest" to use a GitHub-hosted runner.
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Run Milestone Pester tests
        env:
          VMSSERVERADDRESS: ${{ secrets.VmsServerAddress }}
          VMSUSERNAME: ${{ secrets.VmsUserName }}
          VMSPASSWORD: ${{ secrets.VmsPassword }}
          VMSBASICUSER: ${{ secrets.VmsBasicUser }}
        run: |
          Import-Module Pester -MinimumVersion 5.3
          $requiredVars = @(
              'VmsServerAddress'
              'VmsUsername'
              'VmsPassword'
          )
          $testParams = @{}
          foreach ($var in $requiredVars) {
              $testParams[($var.TrimStart('Vms'))] = Get-Item env:$var | Select-Object -ExpandProperty Value -ErrorAction Stop
          }
          $testParams.Credential = [pscredential]::new($testParams.Username, ($testParams.Password | ConvertTo-SecureString -AsPlainText -Force))
          if ($env:VmsBasicUser) {
              $testParams.BasicUser = [bool]::Parse($env:VmsBasicUser)
          }
          if ($env:VmsIncludeChildSites) {
              $testParams.IncludeChildSites = [bool]::Parse($env:VmsIncludeChildSites)
          }
          $container = New-PesterContainer -Path .\Tests\Milestone.Tests.ps1 -Data $testParams
          $cfg = [PesterConfiguration]@{
              Run        = @{
                  Container              = $container
                  SkipRemainingOnFailure = $false
                  Exit                   = $false
                  PassThru               = $true
              }
              TestResult = @{
                  Enabled       = $true
                  TestSuiteName = 'XProtectGuardian'
                  OutputPath    = '.\Tests\results\milestone.xml'
                  OutputFormat  = 'NUnitXml'
              }
              Output     = @{
                  Verbosity = 'Detailed'
              }
          }
          $pester = Invoke-Pester -Configuration $cfg
          & .\bin\extent.exe -d .\Tests\results\ -o .\docs --merge -r v3html
          mkdocs gh-deploy --force
          if ($pester.Result -eq 'Failed') {
            exit 1
          }
        shell: powershell
